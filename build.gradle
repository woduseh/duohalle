plugins {
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id "com.github.node-gradle.node" version "3.4.0"
    id 'java'
    id 'jacoco'
}

/* npm install */
node {
    version = '16.16.0'
    download = true
    nodeModulesDir = file("${projectDir}/src/main/resources/static")
}

task copyFrontLib(type: Copy) {
    from "${projectDir}/src/main/resources/static"
    into "${projectDir}/build/resources/main/static/."
}

copyFrontLib.dependsOn npmInstall
compileJava.dependsOn copyFrontLib

group = 'com.hac'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.8"
}

tasks.jar {
    enabled = false
}


dependencies {
    /* Spring Boot */
    implementation 'org.springframework.boot:spring-boot-starter-mail:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-web:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-security:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf:2.7.2'
    implementation 'org.springframework.boot:spring-boot-starter-validation:2.7.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.7.2'
    testImplementation 'org.springframework.batch:spring-batch-test:4.3.6'
    
    implementation 'org.springframework.security:spring-security-test:5.7.2'
    testImplementation 'org.springframework.security:spring-security-test:5.7.2'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:2.7.2'

    developmentOnly 'org.springframework.boot:spring-boot-devtools:2.7.2'

    /* Thymeleaf */
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.1.0'

    /* lombok */
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    /* H2 DB */
    runtimeOnly 'com.h2database:h2:2.1.214'

    /* PostgreSQL DB */
    runtimeOnly 'org.postgresql:postgresql:42.3.6'

    /* QueryDSL */
    implementation('com.querydsl:querydsl-jpa:5.0.0')
    implementation('com.querydsl:querydsl-apt:5.0.0')
    annotationProcessor(
            'javax.persistence:javax.persistence-api:2.2',
            'javax.annotation:javax.annotation-api:1.3.2',
            'com.querydsl:querydsl-apt:5.0.0:jpa')
}

tasks.named('test') {
    useJUnitPlatform()
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

/* jacoco */
jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/BlogApplication*',
                            '**/*Request*',
                            '**/*Response*',
                            '**/*Dto*',
                            '**/*OAuthClient*',
                            '**/*Interceptor*',
                            '**/*Exception*',
                            '**/*Storage*',
                            '**/*BaseDate*',
                            '**/*PageController*'
                    ] + Qdomains)
                })
        )
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.60
            }

            excludes = [
                    '**.*BlogApplication*',
                    '**.*Request*',
                    '**.*Response*',
                    '**.*Dto*',
                    '**.*OAuthClient*',
                    '**.*Interceptor*',
                    '**.*Exception*',
                    '**.*Storage*',
                    '**.*BaseDate*',
                    '**.*PageController*',
            ] + Qdomains
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}